/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GameBetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "away"
      | "bets"
      | "betters"
      | "claimPayout"
      | "getContractDetails"
      | "home"
      | "kickoffTime"
      | "organizer"
      | "placeBet"
      | "rateOrganizer"
      | "resolve"
      | "result"
      | "totalBetAway"
      | "totalBetHome"
      | "totalPool"
      | "updateKickoffTime"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetPlaced"
      | "KickoffTimeUpdated"
      | "PayoutClaimed"
      | "ResultDeclared"
  ): EventFragment;

  encodeFunctionData(functionFragment: "away", values?: undefined): string;
  encodeFunctionData(functionFragment: "bets", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "betters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "home", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kickoffTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "organizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateOrganizer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBetAway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBetHome",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateKickoffTime",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "away", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "home", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickoffTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "organizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateOrganizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBetAway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBetHome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateKickoffTime",
    data: BytesLike
  ): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    better: AddressLike,
    team: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [better: string, team: bigint, amount: bigint];
  export interface OutputObject {
    better: string;
    team: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KickoffTimeUpdatedEvent {
  export type InputTuple = [newKickoffTime: BigNumberish];
  export type OutputTuple = [newKickoffTime: bigint];
  export interface OutputObject {
    newKickoffTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutClaimedEvent {
  export type InputTuple = [better: AddressLike, amount: BigNumberish];
  export type OutputTuple = [better: string, amount: bigint];
  export interface OutputObject {
    better: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultDeclaredEvent {
  export type InputTuple = [result: BigNumberish];
  export type OutputTuple = [result: bigint];
  export interface OutputObject {
    result: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameBet extends BaseContract {
  connect(runner?: ContractRunner | null): GameBet;
  waitForDeployment(): Promise<this>;

  interface: GameBetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  away: TypedContractMethod<[], [string], "view">;

  bets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        team: bigint;
        amount: bigint;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;

  betters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  claimPayout: TypedContractMethod<[], [void], "nonpayable">;

  getContractDetails: TypedContractMethod<
    [],
    [[string, string, bigint, string, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  home: TypedContractMethod<[], [string], "view">;

  kickoffTime: TypedContractMethod<[], [bigint], "view">;

  organizer: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<[pick: BigNumberish], [void], "payable">;

  rateOrganizer: TypedContractMethod<
    [rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolve: TypedContractMethod<[_result: BigNumberish], [void], "nonpayable">;

  result: TypedContractMethod<[], [bigint], "view">;

  totalBetAway: TypedContractMethod<[], [bigint], "view">;

  totalBetHome: TypedContractMethod<[], [bigint], "view">;

  totalPool: TypedContractMethod<[], [bigint], "view">;

  updateKickoffTime: TypedContractMethod<
    [_newKickoffTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "away"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        team: bigint;
        amount: bigint;
        hasClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "betters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "claimPayout"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContractDetails"
  ): TypedContractMethod<
    [],
    [[string, string, bigint, string, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "home"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "kickoffTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "organizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<[pick: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "rateOrganizer"
  ): TypedContractMethod<[rating: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolve"
  ): TypedContractMethod<[_result: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "result"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBetAway"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBetHome"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateKickoffTime"
  ): TypedContractMethod<[_newKickoffTime: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "KickoffTimeUpdated"
  ): TypedContractEvent<
    KickoffTimeUpdatedEvent.InputTuple,
    KickoffTimeUpdatedEvent.OutputTuple,
    KickoffTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutClaimed"
  ): TypedContractEvent<
    PayoutClaimedEvent.InputTuple,
    PayoutClaimedEvent.OutputTuple,
    PayoutClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ResultDeclared"
  ): TypedContractEvent<
    ResultDeclaredEvent.InputTuple,
    ResultDeclaredEvent.OutputTuple,
    ResultDeclaredEvent.OutputObject
  >;

  filters: {
    "BetPlaced(address,uint8,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "KickoffTimeUpdated(uint256)": TypedContractEvent<
      KickoffTimeUpdatedEvent.InputTuple,
      KickoffTimeUpdatedEvent.OutputTuple,
      KickoffTimeUpdatedEvent.OutputObject
    >;
    KickoffTimeUpdated: TypedContractEvent<
      KickoffTimeUpdatedEvent.InputTuple,
      KickoffTimeUpdatedEvent.OutputTuple,
      KickoffTimeUpdatedEvent.OutputObject
    >;

    "PayoutClaimed(address,uint256)": TypedContractEvent<
      PayoutClaimedEvent.InputTuple,
      PayoutClaimedEvent.OutputTuple,
      PayoutClaimedEvent.OutputObject
    >;
    PayoutClaimed: TypedContractEvent<
      PayoutClaimedEvent.InputTuple,
      PayoutClaimedEvent.OutputTuple,
      PayoutClaimedEvent.OutputObject
    >;

    "ResultDeclared(uint8)": TypedContractEvent<
      ResultDeclaredEvent.InputTuple,
      ResultDeclaredEvent.OutputTuple,
      ResultDeclaredEvent.OutputObject
    >;
    ResultDeclared: TypedContractEvent<
      ResultDeclaredEvent.InputTuple,
      ResultDeclaredEvent.OutputTuple,
      ResultDeclaredEvent.OutputObject
    >;
  };
}
